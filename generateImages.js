// generateImages.js
// ⚠️ Auto-generated helper: scans public/images and writes src/images.ts
// Run: node generateImages.js

const fs = require("fs");
const path = require("path");

const PUBLIC_IMAGES = path.join(__dirname, "public", "images");
const OUTPUT = path.join(__dirname, "src", "images.ts");

// Allowed image extensions (add more if you need)
const exts = new Set([".png", ".jpg", ".jpeg", ".gif", ".webp", ".avif", ".svg"]);

if (!fs.existsSync(PUBLIC_IMAGES)) {
  console.error("❌ Folder not found:", PUBLIC_IMAGES);
  process.exit(1);
}

fs.mkdirSync(path.dirname(OUTPUT), { recursive: true });

function walk(dir) {
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  const node = {};

  for (const entry of entries) {
    if (entry.name.startsWith(".")) continue; // ignore hidden files like .DS_Store
    const full = path.join(dir, entry.name);

    if (entry.isDirectory()) {
      node[entry.name] = walk(full);
    } else {
      const ext = path.extname(entry.name).toLowerCase();
      if (!exts.has(ext)) continue;

      const key = path.parse(entry.name).name; // filename without extension
      const rel = "/" + path.join("images", path.relative(PUBLIC_IMAGES, full)).replace(/\\/g, "/");
      node[key] = rel;
    }
  }

  return node;
}

const data = walk(PUBLIC_IMAGES);

const header = `// Auto-generated by generateImages.js on ${new Date().toISOString()}
// Do not edit manually. Re-run the script after changing files under public/images.
`;

const ts = `${header}export const images = ${JSON.stringify(data, null, 2)} as const;
export type ImagesMap = typeof images;
`;

fs.writeFileSync(OUTPUT, ts, "utf-8");
console.log("✅ Wrote", path.relative(process.cwd(), OUTPUT));
